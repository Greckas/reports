#!/usr/bin/bash

ALL_BROKERS="{{ brokers }}"
WORK_DIR="{{parts.buildout.directory}}/var/reports"
BIN_DIR="{{parts.buildout.directory}}/bin"
ZIP_PATH={{ zip_path }}
RUN_TIME=$(python -c "from datetime import datetime; print datetime.now().strftime('%Y-%m-%d/%H-%M-%S-%f')")

curr_month=$(date +"%m")
prev_month=$(date -d'-1 month' +"%m")

START="$(date -d'-1 month' +'%Y-%m')-01"

if [ $curr_month == $prev_month ]; then
    START="$(date -d'-1 month -1 day' +'%Y-%m')-01"
fi

END="$(date  +'%Y-%m')-01"

BROKERS="$ALL_BROKERS all"
BROKERS_FILE_PATTERN="bids-invoices-tenders-refunds"
NOTIFY_FLAG=""
NOTIFY_BROKERS=""

function create_archive_for_broker () {
    local passwd=""
    local broker="$1"
    local files=""
    passwd=$(pass "$ZIP_PATH/$broker")
    for op in bids invoices tenders refunds; do
        if [[ $BROKERS_FILE_PATTERN == *"$op"* ]]; then
            files+="$WORK_DIR/$broker@$START--$END-$op.csv "
        fi
    done
    "${BIN_DIR}/zip" -p "$passwd" -z "$broker@$START--$END-$BROKERS_FILE_PATTERN.zip" -f $files
}

function generate_for_broker () {
    local broker=$1
    if test "${ALL_BROKERS#*$broker}" == "$ALL_BROKERS"; then
        echo "Not a valid broker $broker" 
        exit
    fi
    for cmd in bids invoices; do
        echo "generation $cmd for $broker"
        "$BIN_DIR/$cmd" -b "$broker" -p "$START" "$END"
    done
    if [ ! -z "$EXCLUDE_FILE_PATH" ]; then
        for cmd in tenders refunds; do
            echo "generation $cmd for $broker"
            "$BIN_DIR/$cmd" -b "$broker" -p "$START" "$END" -i "$EXCLUDE_FILE_PATH"
        done
    else
        for cmd in tenders refunds; do
            echo "generation $cmd for $broker"
            "$BIN_DIR/$cmd" -b "$broker" -p "$START" "$END"
        done

    fi
}

function usage() {
    echo "Generate: usage"
    echo ""
    echo "-h --help - print this message and exit;"
    echo "--period=<PERIOD> - period for generation, format: <Y-m-d>--<Y-m-d>;"
    echo "--brokers=<BROKERS> - brokers to generate;"
    echo "--exclude=<FILE> - path to file with exclude list;"
    echo ""
}

function parse_date () {
    local date="$1"
    local start=""
    local end=""
    start=$(echo "$date" | awk -F'--' '{print $1}'); end=$(echo "$date" | awk -F'--' '{print $2}')
    IFS='-' read -r year month day< <(echo "$start")
    if [ -z "$year" ] || [ -z "$month" ] || [ -z "$day" ]; then
        usage
        exit
    else
        START=$(date -d"$year-$month-$day" +'%Y-%m-%d')
    fi
    IFS='-' read -r year month day< <(echo "$end")
    if [ -z "$year" ] || [ -z "$month" ] || [ -z "$day" ]; then
        usage
        exit
    else
        END=$(date -d"$year-$month-$day" +'%Y-%m-%d')
    fi
}

function join_str() {
    local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}";
}

function parse_brokers_file_content() {
    local content="$1"
    local include=""
    for op in bids invoices tenders refunds; do
        if [[ $content == *"$op"* ]]; then
            include+="$op "
        fi
    done
    echo $include | sed 's/ /-/g'
}

function parse_notification() {
    local flag=$1
    case $flag in
        y | yes | true | True)
            NOTIFY_FLAG="-n"
            ;;
        n | no | false | False)
            NOTIFY_FLAG=""
            ;;
        *)
            echo "Valid values for notiy: y/yes/true/True or n/no/false/False"
            ;;
    esac
}

function create_all_bids() {
    local brokers="$1"
    cat $WORK_DIR/*@$START--$END-bids.csv | head -n 1 > "$WORK_DIR/all@$START--$END-bids.csv"
    for br in $brokers; do
        sort "$WORK_DIR/$br@$START--$END-bids.csv" | head -n -1 >> "$WORK_DIR/all@$START--$END-bids.csv"
    done
}
function create_all_tenders_zip() {
    local brokers="$1"
    local files=""
    for br in $brokers; do
        files+=" $WORK_DIR/$br@$START--$END-tenders.csv" 
        files+=" $WORK_DIR/$br@$START--$END-refunds.csv"
    done
     "${BIN_DIR}/zip" -z "$WORK_DIR/all@$START--$END-tenders.zip" -f $files
}

function create_all_bids_zip() {

    local brokers="$1"
    local passwd=""
    local files="$WORK_DIR/all@$START--$END-bids.csv"
    passwd=$(pass "$ZIP_PATH/all")

    for broker in $brokers; do
        files+=" $WORK_DIR/$broker@$START--$END-invoices.csv"
    done
    "${BIN_DIR}/zip" -p "$passwd" -z  "all@$START--$END-bids.zip" -f $files
}

function send_and_notify() {

    local broker="$1"
    if [[ -z $NOTIFY_BROKERS ]]; then
        if [ "$broker" == "all" ]; then
            $BIN_DIR/send $NOTIFY_FLAG -f "$WORK_DIR/all@$START--$END-tenders.zip" "$WORK_DIR/all@$START--$END-bids.zip" --timestamp $RUN_TIME
        else
            $BIN_DIR/send $NOTIFY_FLAG -f "$WORK_DIR/$broker@$START--$END-$BROKERS_FILE_PATTERN.zip" --timestamp $RUN_TIME
        fi
    else
        if [[ "$broker" == *$NOTIFY_BROKERS* ]]; then
            if [ "$broker" == "all" ]; then
                $BIN_DIR/send $NOTIFY_FLAG -f "$WORK_DIR/all@$START--$END-tenders.zip" "$WORK_DIR/all@$START--$END-bids.zip" --timestamp $RUN_TIME
            else
                $BIN_DIR/send $NOTIFY_FLAG -f "$WORK_DIR/$broker@$START--$END-$BROKERS_FILE_PATTERN.zip" --timestamp $RUN_TIME
            fi
        else
            if [ "$broker" == "all" ]; then
                $BIN_DIR/send  -f "$WORK_DIR/all@$START--$END-tenders.zip" "$WORK_DIR/all@$START--$END-bids.zip" --timestamp $RUN_TIME
            else
                $BIN_DIR/send  -f "$WORK_DIR/$broker@$START--$END-$BROKERS_FILE_PATTERN.zip" --timestamp $RUN_TIME
            fi
        fi
    fi
}

function clean_up() {
    find "$WORK_DIR" -maxdepth 1 -name "*@$START--$END*.csv" -exec rm "{}" \;
}

function generate() {
    echo " Run timestamp: $RUN_TIME"
    local br=${BROKERS/all/}
    if [ "$BROKERS" == "all" ]; then
        for broker in $ALL_BROKERS; do
            generate_for_broker "$broker"
        done
        create_all_bids "$ALL_BROKERS"
        create_all_bids_zip "$ALL_BROKERS"
        create_all_tenders_zip "$ALL_BROKERS"
        send_and_notify "all"
    else
        for broker in $br; do
            generate_for_broker "$broker"
            create_archive_for_broker "$broker"
            send_and_notify "$broker"
        done
        if [[ $BROKERS == *"all"* ]]; then
            local brr="$br"
            create_all_bids "$brr"
            create_all_bids_zip "$brr"
            create_all_tenders_zip "$brr"
            send_and_notify "all"
        fi
    fi
    clean_up
}


while [ "$1" != "" ]; do
    PARAM=$(echo "$1" | awk -F= '{print $1}')
    VALUE=$(echo "$1" | awk -F= '{print $2}')
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        --brokers)
            BROKERS=$(echo "$VALUE" | sed 's/^[^=]*=//g' | sed "s/,/ /g")
            ;;
        --exclude)
            EXCLUDE_FILE_PATH=$(echo $VALUE | sed 's/^[^=]*=//g')
            ;;
        --period)
            parse_date $(echo $VALUE | sed 's/^[^=]*=//g') 
            ;;
        --include)
            val=$(echo $VALUE | sed 's/^[^=]*=//g')
            BROKERS_FILE_PATTERN=$(parse_brokers_file_content $val)
            ;;
        --notify)
            val=$(echo $VALUE | sed 's/^[^=]*=//g')
            parse_notification $val
            ;;
        --timestamp)
            FROM_TIMESTAMP="TRUE"
            TIMESTAMP=$(echo $VALUE | sed 's/^[^=]*=//g')
            ;;
        --notify-brokers)
            NOTIFY_BROKERS=$(echo "$VALUE" | sed 's/^[^=]*=//g' | sed "s/,/ /g")
            ;;

        *)
            echo "Start generation using default options"
            ;;
    esac
    shift
done

if [[ -z $FROM_TIMESTAMP ]]; then
    generate
else
    if [[ -z $NOTIFY_BROKERS ]]; then
        $BIN_DIR/send -e -t "$TIMESTAMP" $NOTIFY_FLAG
    else
        $BIN_DIR/send -e -t "$TIMESTAMP" $NOTIFY_FLAG --brokers $NOTIFY_BROKERS
    fi
    
fi

